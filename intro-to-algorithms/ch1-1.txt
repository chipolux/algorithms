Exercises:
1.1-1: Give a real world example that requires sorting or a real world example
       that requires computing a convex hull.

* You would need to sort students by last and first names to line them up
  in order for graduation.
* When importing assets into a game engine convex polygons are much easier
  to calculate collisions for, so there are tons of pieces of software that
  will analyze your geometry and try to determine a convex hull that
  encompasses your model.

1.1-2: Other than speed, what measures of efficiency might one use in a real
       world setting?

* Many times you might be constrained by memory, especially for embedded
  devices, you could also be working in an environment where network or
  disc access is prohibitively expensive so you need to design your algorithm
  to minimize reads/writes.

1.1-3: Select a data structure that you have seen previously and discuss it's
       strengths and limitations.

* A linked list is a very commonly known data structure, it can be great for
  types of data where there is a strict, and usually one-way link between
  all the data points, it also can be used to create data layouts that are
  great for cache-locality which can be a huge speed boost by minimizing
  reads from main memory. One limitation is that it can also turn against
  you and require tons of memory reads and lookups if you have an odd
  access case that requires random access and so you have to track up and
  down the list and thrash about.

1.1-4: How are the shortest-path and travelling-salesman problems given
       above similar? How are the different?

* Both problems require a kind of graph-traversal, where you need to look
  at a set of connected points and compare lengths. In this same way they
  can both suffer from a kind of explosion of possible combinations.
* They differ in that for the shortest path problem you limit the possible
  solutions and I don't think you would ever have a solution where you
  needed to backtrack across the same "edge". But with the travelling
  salesman problem the exact same graph of nodes could have many more possible
  solutions that could be shorter, since backtracking may be smarter than
  traversing a "long edge". You also have the built-in complexity of
  basically needing to solve a shortest path problem for each combination
  of nodes that the salesman needs to visit. And even then, if you figured
  out the shortest path between each pair of nodes you still need to
  combine those pairs which could make some of those shortest paths not
  make sense!

1.1-5: Come up with a real world problem in which only the best solution
       will do. Then come up with one in which a solution that is approximately
       the best is good enough.

* Figuring out the optimal configuration for storing containers on a ship. If
  you take things like weight, volatility of the contents, timing of when the
  container will be ready, etc. into account it can be a complex problem and
  only getting it "close enough" could result is serious safety issues, so you
  want to for sure get it right.
* Packet routing on the internet on the other hand, it is certainly ideal to be
  able to send a packet along the shortest route from each endpoint but on large
  networks it can be slower to try and solve out the best possible route than
  to just send the packet along with a "pretty good" route. Not to mention once
  you take connection volatility and the possibility of having out of date
  information into account.
